---
- name: UseGalaxy
  hosts: usegalaxy_it_dev
  become: true
  become_user: root
  vars:
    # The full internal name.
    hostname: "{{ inventory_hostname }}"
    # The nginx user needed into the galaxyproject.nginx role
    nginx_conf_user: galaxy
    # This server has multiple CNAMEs that are important. Additionally it
    # provides proxying for many of the other services run by Galaxy Europe.
    # These server_names are passed to certbot. They generally should not need
    # to be updated unless you add a new domain. They *only* work with the
    # route53 provider, so if we want to do usegalaxy.xy, it may require
    # refactoring / multiple certbot runs.
    #
    #
    # The best way to expand them is to run the playbook, it will leave a message with 
    # the command it would have run (look for `skipped, since /etc/letsencrypt/renewal/usegalaxy.eu.conf exists`)
    #
    # Then take this command to the command line (root@sn04) and run it with `--expand`. 
    # E.g. (DO NOT COPY PASTE (in case the config changes))
    #
    # $ /opt/certbot/bin/certbot certonly --non-interactive --dns-route53 \
    #     -m security@usegalaxy.eu --agree-tos -d 'usegalaxy.eu,*.usegalaxy.eu,galaxyproject.eu,*.galaxyproject.eu,*.interactivetoolentrypoint.interactivetool.usegalaxy.eu,*.interactivetoolentrypoint.interactivetool.live.usegalaxy.eu,*.interactivetoolentrypoint.interactivetool.test.usegalaxy.eu' --expand
    # Saving debug log to /var/log/letsencrypt/letsencrypt.log
    # Credentials found in config file: ~/.aws/config
    # ....
    # IMPORTANT NOTES:
    #  - Congratulations! Your certificate and chain have been saved at:
    #
    # And you're done expanding the certs.
    #
    # The nginx user needed into the galaxyproject.nginx role
    server_names:
      - '{{ hostname }}'
      - 'www.usegalaxy.it'
      - '*.usegalaxy.it'
      - 'usegalaxy-it.ext.cineca.it'
      - '*.usegalaxy-it.ext.cineca.it'
  vars_files:
    # - group_vars/tiaas.yml             # All of the training infrastructure
    # - group_vars/custom-sites.yml      # Subdomains are listed here
    - group_vars/gxconfig-dev.yml          # The base galaxy configuration
    - group_vars/toolbox.yml           # User controlled toolbox
    - secret_group_vars/db-dev.yml    # DB URL + some postgres stuff
    - secret_group_vars/all.yml        # All of the other assorted secrets...
    - secret_group_vars/htcondor.yml   # condor secrets
    - secret_group_vars/rabbitmq.yml   # rabbitmq + pulsar
    - templates/galaxy/config/job_conf.yml
  collections:
    - devsec.hardening
  handlers:
    - name: Restart Galaxy # sync nfs to document
      shell: |
        #echo 'Manual web handler restart required' && cd /opt/galaxy/ && source /opt/galaxy/.bashrc  && systemctl restart galaxy-handler@* && systemctl restart galaxy-workflow-scheduler@*
        #echo 'Manual web handler restart required' && cd /opt/galaxy/ && source /opt/galaxy/.bashrc  && sudo -u galaxy /usr/bin/galaxy-sync-to-nfs && systemctl restart galaxy-handler@* && systemctl restart galaxy-workflow-scheduler@*
        #/usr/bin/gxadmin gunicorn handler-restart && systemctl restart galaxy-handler@* && systemctl restart galaxy-workflow-scheduler@* # NOTE this is for production
        cd /opt/galaxy && source /opt/galaxy/.bashrc && /usr/bin/gxadmin gunicorn handler-restart && cd /etc/systemd/system/multi-user.target.wants/ && systemctl restart galaxy-handler@* && cd && systemctl restart galaxy-workflow-scheduler@* # NOTE this implements workarounds for cineca deployment, which has uncorrect systemd configuration, will rebuild it.
      listen: "restart galaxy"
    - name: Reload HTCondor
      when: "'condor_service' in service_facts.ansible_facts.services and \
        service_facts.ansible_facts.services['condor.service'].state == 'running'"
      become: true
      ansible.builtin.service:
        name: condor
        state: reloaded
  pre_tasks:
    - name: Install Packages for Rocky Linux
      dnf:
        name:
          - langpacks-en
          - glibc-all-langpacks
          - epel-release
          - tmpwatch # for gxadmin 
        state: present
    - name: Install python3-wheel-wheel 
      yum:
        name: python3-wheel-wheel
        enablerepo: devel
        state: present
    - name: Install python3-virtualenv
      yum:
        name: python3-virtualenv
        enablerepo: epel-release
        state: present
    - name: Install Dependencies
      package:
        name: [ 'postgresql', 'python3-psycopg2', 'python3-virtualenv', 'bc', 'python3', 'make', 'pip',  'gcc', 'openssl-devel', 'bzip2', 'bzip2-devel', 'libffi-devel', 'zlib-devel', 'xz-devel', 'sqlite-devel', 'wget', 'tar', 'acl' ]
      become: true
    - name: '[EL] Install virtualenv for python3'
      pip:
        name: virtualenv
        executable: pip3
      when: ansible_os_family == "RedHat"
    - name: Update ca-certificates
      yum:
        name: ca-certificates
        state: latest
    - name: Disable SELinux
      selinux:
        state: disabled
    # HTCondor
    - debug:
        msg: '{{ htcondor_password }}'
    - debug:
        msg: '{{ htcondor_daemons | json_query("@") | join(", ") }}'
    # HTCondor
    - name: Ensure the HTCondor configuration directory exists.
      become: true
      ansible.builtin.file:
        path: /etc/condor
        state: directory
        owner: root
        group: root
        mode: "0755"
    - name: Template HTCondor configuration.
      become: true
      ansible.builtin.template:
        src: htcondor/condor_config.local.j2
        dest: /etc/condor/condor_config.local
        owner: root
        group: root
        mode: "0644"
      notify: Reload HTCondor
    - name: Check if HTCondor is running.
      ansible.builtin.service_facts:
      register: service_facts

  post_tasks:
    - name: Append some users to the systemd-journal group
      user:
        name: "{{ item }}"
        groups: systemd-journal
        append: yes
      loop:
        - "{{ galaxy_user.name }}"
        # - "telegraf"
    - name: Install utilities
      package:
        name: [ 'mosh' ]
      become: true
    - name: Install pdf export dependencies
      package:
        name: [ 'cairo', 'cairo-devel', 'pango-devel' ]
      become: true
    ######## Fixes for usegalaxy.it ########
    - name: Create local tool directory and give right permissions
      file:
        path: /usr/local/tools
        owner: galaxy
        group: galaxy
        state: directory
        mode: '0755'
    - name: Create local tool directory and give right permissions
      file:
        path: /opt/galaxy/server/compliance.log
        owner: galaxy
        group: galaxy
        state: touch
        mode: '0755'
    # This will cause datasets deleted for more than 60 days to be purged. https://training.galaxyproject.org/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html
    - name: Setup gxadmin cleanup task
      ansible.builtin.cron:
        name: "Cleanup Old User Data"
        user: galaxy # Run as the Galaxy user
        minute: "0"
        hour: "0"
        job: "GALAXY_CONFIG_FILE={{ galaxy_config_dir }}/galaxy.yml GALAXY_LOG_DIR=/tmp/gxadmin/ GALAXY_ROOT={{ galaxy_server_dir }} /usr/local/bin/gxadmin galaxy cleanup 60"
    ######## Fixes for usegalaxy.it ########
    - name: Set temporary cron for cleaning docker images
      ansible.builtin.cron:
        name: "Temporary docker cleanup – needs upstream fix see issue #584"
        minute: "0"
        hour: "*/3"
        job: "/bin/docker system prune --all -f > /dev/null"
  roles:
    ## Starting configuration of the operating system
    - role: usegalaxy_eu.handy.os_setup
      vars:
        enable_hostname: true
        enable_powertools: true       # geerlingguy.repo-epel role doesn't enable PowerTools repository
        enable_remap_user: true       # change existing 999:999 user
        enable_exclude_packages: true
        enable_pam_limits: true       # Prevent out of control processes
        enable_install_software: true # Some extra admin tools (*top, vim, etc)
    ## Dependencies 
    - geerlingguy.repo-epel # Install EPEL 
    
    - usegalaxy-eu.autoupdates # keep all of our packages up to date
    - influxdata.chrony # Keep our time in sync. 

    ## Filesystem
    #- usegalaxy-eu.autofs # TODO fix this for using only nfs4 -> the fix is on infrastructure-playbook, more test needed.
    - galaxyproject.cvmfs # Galaxy datasets 

    # NOTE only for usegalaxy.eu
    ## Monitoring
    # - hxr.monitor-cluster
    # - hxr.monitor-email
    # - hxr.monitor-uwsgi
    # - hxr.monitor-galaxy-journalctl
    # - usegalaxy-eu.monitor-disk-access-time
    # - usegalaxy-eu.monitoring

    ## Setup Galaxy user
    - role: galaxyproject.galaxy
      vars:
        galaxy_create_user: true
        galaxy_manage_clone: false
        galaxy_manage_download: false
        galaxy_manage_existing: true
        galaxy_manage_paths: true
        galaxy_manage_static_setup: false
        galaxy_manage_mutable_setup: false
        galaxy_manage_database: false
        galaxy_fetch_dependencies: false
        galaxy_build_client: false
        galaxy_manage_systemd: false # switch to gravity(?)
        galaxy_manage_gravity: false

    # NOTE: some setting on EU are done through .bashrc file.
    # In particular gxadmin needs it: https://github.com/galaxyproject/gxadmin?tab=readme-ov-file#other-environment-variables
    # For example log and job working dir are managed through this role.
    # We disable it and remove it from roles since it needs to be kept updated
    # We include a pre-task to fix bashrc environment variables.
    ## The bashrc needs to be created for several later features.
    #- usegalaxy-eu.bashrc #NOTE REMOVED
    - usegalaxy_it.bashrc

    ## Setup docker
    - geerlingguy.docker 

    ## HTCondor Cluster setup
    - usegalaxy-eu.ansible-htcondor-grycap

    ## Misc.
    - role: hxr.galaxy-nonreproducible-tools 
      become: true
      become_user: galaxy
    #- usegalaxy-eu.dynmotd      # nicer MOTD/welcome message # NOTE REMOVED
    #- role: usegalaxy-eu.rsync-to-nfs # sync codebase to NFS # NOTE REMOVED
    #    vars:
    #    execute_galaxy_sync_to_nfs: true
    - role: usegalaxy-eu.webhooks     # Clone webhook repository 
      become: true
      become_user: galaxy
    - role: usegalaxy-eu.tours        # Clone tour repository 
      become: true
      become_user: galaxy

    # NOTE only for usegalaxy.eu -> REMOVED
    ## SSL / Security
    # https://en.wikipedia.org/wiki/Trust_on_first_use
    # - ssh-host-sign # Sign the server host key to prevent TOFU for SSH
    # - hxr.aws-cli   # Setup the AWS client that will be needed for route53 authentication of certbot. MUST come before nginx role

    ## GALAXY
    - hxr.postgres-connection
    - galaxyproject.gxadmin
    - role: usegalaxy-eu.certbot # run before nginx to aviod fail in the next step
      vars: 
        certbot_install_method: virtualenv
    - usegalaxy-eu.nginx
    - usegalaxy_it.welcome_pages

    # NOTE REMOVED
    ## TODO move under monitoring + telegraf.
    # - usegalaxy-eu.galaxy-slurp
    # - usegalaxy-eu.gapars-galaxy

    ## The REAL galaxy role
    - role: galaxyproject.galaxy
      vars:
        galaxy_create_user: true
        galaxy_manage_clone: true
        galaxy_manage_download: false
        galaxy_manage_existing: false
        galaxy_manage_static_setup: true
        galaxy_manage_mutable_setup: true
        galaxy_manage_database: true # !!! CHECK
        galaxy_fetch_dependencies: true
        galaxy_build_client: true
        galaxy_manage_systemd: false # switch to gravity(?)
        galaxy_manage_gravity: false

    # NOTE some of this are EU specific and are disabled on IT.
    ## Extras!
    # - usegalaxy-eu.fix-galaxy-server-dir # Fix details into the galaxy server dirs #NOTE REMOVE
    - hxr.install-to-venv                # Some extra packages our site needs.
    - usegalaxy-eu.galaxy-systemd        # Manage the Galaxy processes with SystemD 
    # - usegalaxy-eu.update-hosts          # Update hosts list #NOTE REMOVED
    - usegalaxy_eu.gie_proxy             # Setup the NodeJS proxy for GxIT
    # - usegalaxy-eu.subdomain-themes      # Custom subdomain themes # TODO currently we don't have subdomains
    - usegalaxy-eu.limits                # Prevent out of control processes 
    # - usegalaxy-eu.fs-maintenance        # Filesystems maintenance scripts.
    - usegalaxy-eu.logrotate             # Rotate logs # NOTE need to fix log path
    - usegalaxy-eu.error-pages           # Copy the NGINX error pages # TODO create role for error page and role for usegalaxy.it
    
    ## TUSD
    - galaxyproject.tusd

    - usegalaxy_eu.tpv_auto_lint
    # Various EU specific fixes
    # - usegalaxy-eu.fix-unscheduled-jobs # Workaround for ???
    # - usegalaxy-eu.fix-unscheduled-workflows # Workaround for https://github.com/galaxyproject/galaxy/issues/8209
    # - usegalaxy-eu.fix-stuck-handlers # Restart handlers to prevent several classes of issues
    # - usegalaxy-eu.log-cleaner # do not retain journalctl logs, they are unnecessary/risky under GDPR
    # - usegalaxy-eu.fix-ancient-ftp-data # Remove FTP data older than 3 months, create FTP user directories
    # - usegalaxy-eu.galaxy-procstat # Some custom telegraf monitoring that's templated
    # - usegalaxy-eu.fix-user-quotas # Automatically recalculate user quotas and attribute ELIXIR quota to ELIXIR AAI user on a regular basis
    # - usegalaxy-eu.fix-stop-ITs # remove IT jobs after 24h from queue 

    # Some of our 'cleanups' also generate telegraf format so this goes at end.
    # - dj-wasabi.telegraf
    - os_hardening    
    - ssh_hardening
    # - usegalaxy-eu.vgcn-monitoring

